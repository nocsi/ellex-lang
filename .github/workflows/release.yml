name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: el

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            crates/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run tests
        run: |
          cd crates
          cargo test --verbose --all-features
          
      - name: Run clippy
        run: |
          cd crates
          cargo clippy --all-targets --all-features -- -D warnings
          
      - name: Check formatting
        run: |
          cd crates
          cargo fmt --all -- --check

  build:
    name: Build Release Binaries
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: el-linux-x64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: el-linux-arm64
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: el-macos-x64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: el-macos-arm64
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: el-windows-x64.exe
            
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: el-windows-arm64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            crates/target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build release binary
        run: |
          cd crates
          cargo build --release --target ${{ matrix.target }} --bin el --verbose
          
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd crates
          cp target/${{ matrix.target }}/release/el ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
          
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd crates
          copy target\${{ matrix.target }}\release\el.exe ${{ matrix.name }}
          
      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd crates
          tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }} -C ../
          
      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd crates
          Compress-Archive -Path ${{ matrix.name }} -DestinationPath ${{ matrix.name }}.zip
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: |
            crates/${{ matrix.name }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v5
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
          
      - name: Display structure of downloaded files
        run: ls -la artifacts/
        
      - name: Create release notes
        run: |
          echo "# Ellex Release ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## What's New" >> release_notes.md
          echo "" >> release_notes.md
          echo "Cross-platform binaries for the Ellex natural language programming environment." >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "Download the appropriate binary for your platform:" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Linux x64**: \`el-linux-x64.tar.gz\`" >> release_notes.md
          echo "- **Linux ARM64**: \`el-linux-arm64.tar.gz\`" >> release_notes.md
          echo "- **macOS x64**: \`el-macos-x64.tar.gz\`" >> release_notes.md
          echo "- **macOS ARM64**: \`el-macos-arm64.tar.gz\` (Apple Silicon)" >> release_notes.md
          echo "- **Windows x64**: \`el-windows-x64.exe.zip\`" >> release_notes.md
          echo "- **Windows ARM64**: \`el-windows-arm64.exe.zip\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "Extract and run with \`./el --help\` (Unix) or \`el.exe --help\` (Windows)" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Features" >> release_notes.md
          echo "" >> release_notes.md
          echo "- 🚀 Natural language programming syntax" >> release_notes.md
          echo "- 🔄 Interactive REPL environment" >> release_notes.md  
          echo "- 🌐 Web playground server" >> release_notes.md
          echo "- 🖥️ Terminal UI with real-time metrics" >> release_notes.md
          echo "- 🎯 Built-in safety monitoring" >> release_notes.md
          echo "- 🐢 Turtle graphics support" >> release_notes.md
          echo "- 🔄 JavaScript transpilation" >> release_notes.md
          echo "" >> release_notes.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Ellex ${{ github.ref_name }}"
          body_path: release_notes.md
          files: |
            artifacts/*/el-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}