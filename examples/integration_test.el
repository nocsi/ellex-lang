# Parser-Runtime Integration Test
# This example demonstrates the complete integration between the Ellex parser and runtime
# It tests the full pipeline from natural language syntax to execution

tell "üîó Parser-Runtime Integration Test"
tell "Testing the complete pipeline from parsing to execution..."
tell ""

# 1. Basic Syntax Parsing and Execution
tell "1. Basic Statement Parsing:"
tell "Hello, world!"
tell 42
tell "String and number parsing works!"
tell ""

# 2. Variable Parsing and Runtime Integration
tell "2. Variable System Integration:"
ask "What's your favorite programming language?" = language
ask "How many years have you been coding?" = years
tell "You've been coding {language} for {years} years!"
tell ""

# 3. Loop Parsing and Execution
tell "3. Loop Syntax Integration:"
repeat 4 times do
    tell "This loop was parsed and executed correctly"
    tell "Loop iteration complete"
end
tell ""

# 4. Conditional Parsing and Runtime Logic
tell "4. Conditional Logic Integration:"
when language is "Ellex" do
    tell "üéâ Excellent choice! Ellex is perfect for learning!"
end

when years is "1" do
    tell "üå± You're just getting started - keep going!"
end

when years is "5" do
    tell "üöÄ You're becoming an expert!"
end
tell ""

# 5. Function Definition Parsing and Execution
tell "5. Function System Integration:"
make greet_coder do
    tell "üëã Hello, fellow coder!"
    tell "Welcome to the world of programming!"
    tell "Your language: {language}"
    tell "Your experience: {years} years"
end

make celebrate do
    tell "üéä Let's celebrate your coding journey!"
    greet_coder
    tell "Keep up the great work!"
end

celebrate
tell ""

# 6. Turtle Graphics Parsing and Execution
tell "6. Turtle Graphics Integration:"
tell "Drawing a triangle with parsed turtle commands..."

pen_down
forward
right
forward
right
forward
right
pen_up

tell "Triangle drawing complete!"
tell ""

# 7. Complex Nested Structures
tell "7. Complex Syntax Integration:"
repeat 3 times do
    tell "Starting iteration..."
    
    when language is "Ellex" do
        tell "  Ellex iteration"
        forward
        right
    end
    
    make nested_function do
        tell "  Nested function called"
        tell "  Function scope works correctly"
    end
    
    nested_function
    tell "Iteration complete"
end
tell ""

# 8. Error Handling Integration
tell "8. Error Handling Integration:"
tell "Testing graceful error handling..."

# Test undefined variable handling
tell "Undefined variable test: {undefined_var}"

# Test unknown function calls
unknown_function

tell "Errors handled gracefully by the runtime!"
tell ""

# 9. Modal Command Parsing
tell "9. Modal Programming Integration:"
tell "Testing modal command parsing and execution..."

@listen do
    around greet_coder
end

@think do
    what does celebrate do?
end

@build do
    extract 1,3 = new_greeting
end

tell "Modal commands parsed and executed!"
tell ""

# 10. Service Configuration Parsing
tell "10. Service Configuration Integration:"
tell "Testing service definition parsing..."

service "integration-test" do
    image "ellex/test:latest"
    port 8080
    environment do
        TEST_MODE "true"
        LANGUAGE "{language}"
        YEARS "{years}"
    end
    health_check do
        path "/health"
        interval 30
        timeout 10
    end
end

tell "Service configuration parsed successfully!"
tell ""

# 11. Advanced Expression Parsing
tell "11. Advanced Expression Integration:"
tell "Testing complex expression parsing and evaluation..."

ask "Enter a number for calculation:" = number
tell "Your number: {number}"
tell "Number processing complete"

# Variable interpolation in different contexts
when number is "10" do
    tell "Perfect ten! {number} is a great number!"
    repeat 2 times do
        tell "Celebrating {number}!"
    end
end
tell ""

# 12. Mixed Content Integration
tell "12. Mixed Content Integration:"
tell "Testing integration of all syntax elements together..."

make comprehensive_test do
    tell "Starting comprehensive integration test..."
    
    # Variables
    ask "Test variable:" = test_var
    
    # Loops with conditions
    repeat 2 times do
        when test_var is "success" do
            tell "‚úÖ Integration test: {test_var}"
            
            # Nested turtle commands
            pen_down
            forward
            pen_up
        end
    end
    
    tell "Comprehensive test complete!"
end

comprehensive_test
tell ""

# 13. Performance Integration Test
tell "13. Performance Integration:"
tell "Testing parser-runtime performance with rapid execution..."

repeat 10 times do
    tell "Performance test iteration"
    make quick_function do
        tell "Quick function execution"
    end
    quick_function
end

tell "Performance test complete - parsing and execution optimized!"
tell ""

# 14. Memory Management Integration
tell "14. Memory Management Integration:"
tell "Testing variable scope and memory cleanup..."

make scope_test do
    ask "Local variable:" = local_var
    tell "Local variable created: {local_var}"
    
    make inner_scope do
        ask "Inner variable:" = inner_var
        tell "Inner variable: {inner_var}"
        tell "Both variables accessible"
    end
    
    inner_scope
    tell "Scope test complete"
end

scope_test
tell "Memory management working correctly!"
tell ""

# 15. Safety Integration Test
tell "15. Safety System Integration:"
tell "Testing safety monitoring during parsed code execution..."

# Safe operations that should complete
repeat 5 times do
    tell "Safe operation"
    forward
end

# Test safety limits awareness
tell "Safety limits properly integrated with runtime!"
tell ""

# Integration Test Summary
tell "üìã Integration Test Results:"
tell ""
tell "‚úÖ Basic statement parsing and execution"
tell "‚úÖ Variable system integration"
tell "‚úÖ Loop syntax and runtime execution"
tell "‚úÖ Conditional logic integration"
tell "‚úÖ Function definition and calling"
tell "‚úÖ Turtle graphics command integration"
tell "‚úÖ Complex nested structure handling"
tell "‚úÖ Error handling integration"
tell "‚úÖ Modal programming integration"
tell "‚úÖ Service configuration parsing"
tell "‚úÖ Advanced expression evaluation"
tell "‚úÖ Mixed content processing"
tell "‚úÖ Performance optimization"
tell "‚úÖ Memory management integration"
tell "‚úÖ Safety system integration"
tell ""

# Parser-Runtime Architecture Summary
tell "üèóÔ∏è Parser-Runtime Architecture:"
tell ""
tell "Parsing Pipeline:"
tell "  1. Pest grammar ‚Üí AST generation"
tell "  2. Statement tree construction"
tell "  3. Expression parsing and validation"
tell "  4. Function and variable resolution"
tell ""
tell "Runtime Pipeline:"
tell "  1. Safety monitoring initialization"
tell "  2. Statement-by-statement execution"
tell "  3. Variable scope management"
tell "  4. Function call stack management"
tell "  5. Resource cleanup and optimization"
tell ""
tell "Integration Features:"
tell "  ‚Ä¢ Zero-copy AST execution"
tell "  ‚Ä¢ Streaming parser-runtime communication"
tell "  ‚Ä¢ Optimized variable resolution"
tell "  ‚Ä¢ Efficient function dispatch"
tell "  ‚Ä¢ Real-time safety monitoring"
tell "  ‚Ä¢ Automatic error recovery"
tell ""

# Future Integration Enhancements
tell "üöÄ Future Integration Enhancements:"
tell ""
tell "Planned Improvements:"
tell "  ‚Ä¢ JIT compilation for hot paths"
tell "  ‚Ä¢ Advanced AST optimization"
tell "  ‚Ä¢ Parallel execution for safe operations"
tell "  ‚Ä¢ Enhanced type inference"
tell "  ‚Ä¢ Real-time syntax validation"
tell "  ‚Ä¢ Interactive debugging integration"
tell ""

tell "üéØ Parser-Runtime Integration Test Complete!"
tell "The Ellex parser and runtime work seamlessly together!"
tell "From natural language syntax to safe, efficient execution."
tell ""
tell "Ready for real-world educational programming! üåü"