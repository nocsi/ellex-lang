title: Ellex Language Architecture

# User Interfaces Layer
ui_layer: {
  label: "User Interfaces"
  style.fill: "#e3f2fd"
  style.stroke: "#1976d2"
  
  web_playground: {
    label: "Web Playground\n🌐 Browser-based IDE\n• Real-time execution\n• Session management\n• Interactive tutorials"
    shape: rectangle
    style.fill: "#bbdefb"
  }
  
  cli_repl: {
    label: "CLI REPL\n💻 Terminal Interface\n• Interactive shell\n• Command history\n• Syntax highlighting"
    shape: rectangle
    style.fill: "#bbdefb"
  }
  
  tui: {
    label: "TUI Interface\n📊 Terminal UI\n• Real-time metrics\n• Multi-tab editor\n• Visual debugging"
    shape: rectangle
    style.fill: "#bbdefb"
  }
  
  mobile_app: {
    label: "Mobile App\n📱 iOS/Android\n• Touch-friendly\n• Voice input\n• Turtle graphics"
    shape: rectangle
    style.fill: "#bbdefb"
    style.stroke-dash: 5
  }
}

# API Layer
api_layer: {
  label: "API Layer"
  style.fill: "#f3e5f5"
  style.stroke: "#7b1fa2"
  
  rest_api: {
    label: "REST API\n🔌 HTTP Endpoints\n• Session management\n• Code execution\n• Real-time results"
    shape: rectangle
    style.fill: "#e1bee7"
  }
  
  websocket: {
    label: "WebSocket API\n⚡ Real-time Communication\n• Live execution\n• Interactive input\n• Stream results"
    shape: rectangle
    style.fill: "#e1bee7"
    style.stroke-dash: 5
  }
  
  graphql: {
    label: "GraphQL API\n📊 Flexible Queries\n• Schema introspection\n• Efficient data fetching\n• Type safety"
    shape: rectangle
    style.fill: "#e1bee7"
    style.stroke-dash: 5
  }
}

# Core Language Layer
core_layer: {
  label: "Core Language Runtime"
  style.fill: "#e8f5e8"
  style.stroke: "#388e3c"
  
  repl_engine: {
    label: "REPL Engine\n🔄 Interactive Execution\n• Session state\n• Variable persistence\n• Command history\n• Error recovery"
    shape: rectangle
    style.fill: "#c8e6c9"
  }
  
  parser: {
    label: "Parser\n📝 Natural Language → AST\n• Pest grammar\n• Error recovery\n• Syntax highlighting\n• Auto-completion"
    shape: rectangle
    style.fill: "#c8e6c9"
  }
  
  runtime: {
    label: "Runtime Engine\n⚙️ Code Execution\n• Safe execution\n• Memory limits\n• Timeout protection\n• Variable management"
    shape: rectangle
    style.fill: "#c8e6c9"
  }
  
  optimizer: {
    label: "Optimizer Pipeline\n🚀 Code Optimization\n• Constant folding\n• Dead code elimination\n• Loop unrolling\n• Function inlining"
    shape: rectangle
    style.fill: "#c8e6c9"
  }
}

# Modal Programming Layer
modal_layer: {
  label: "Modal Programming"
  style.fill: "#fce4ec"
  style.stroke: "#c2185b"
  
  listen_mode: {
    label: "@listen Mode\n👂 Exploration\n• Code discovery\n• Documentation\n• Related functions\n• Pattern matching"
    shape: rectangle
    style.fill: "#f8bbd9"
  }
  
  think_mode: {
    label: "@think Mode\n🤔 Analysis\n• Code understanding\n• Impact analysis\n• Usage patterns\n• Performance insights"
    shape: rectangle
    style.fill: "#f8bbd9"
  }
  
  build_mode: {
    label: "@build Mode\n🔨 Construction\n• Code refactoring\n• Function extraction\n• Variable renaming\n• Structure changes"
    shape: rectangle
    style.fill: "#f8bbd9"
  }
  
  teach_mode: {
    label: "@teach Mode\n🎓 Education\n• Concept explanation\n• Example generation\n• Learning paths\n• Practice suggestions"
    shape: rectangle
    style.fill: "#f8bbd9"
  }
}

# AI & Graphics Layer
ai_graphics_layer: {
  label: "AI & Graphics"
  style.fill: "#fff3e0"
  style.stroke: "#f57c00"
  
  ai_assistant: {
    label: "AI Assistant\n🤖 Intelligent Help\n• Code suggestions\n• Error explanation\n• Learning guidance\n• Pattern recognition"
    shape: rectangle
    style.fill: "#ffe0b2"
  }
  
  turtle_graphics: {
    label: "Turtle Graphics\n🐢 Visual Programming\n• 2D drawing canvas\n• Movement commands\n• Color management\n• Shape creation"
    shape: rectangle
    style.fill: "#ffe0b2"
  }
  
  visual_editor: {
    label: "Visual Editor\n🎨 Block-based UI\n• Drag & drop\n• Visual connections\n• Code generation\n• Live preview"
    shape: rectangle
    style.fill: "#ffe0b2"
    style.stroke-dash: 5
  }
}

# Safety & Monitoring Layer
safety_layer: {
  label: "Safety & Monitoring"
  style.fill: "#ffebee"
  style.stroke: "#d32f2f"
  
  safety_monitor: {
    label: "Safety Monitor\n🛡️ Execution Protection\n• Timeout enforcement\n• Memory limits\n• Recursion depth\n• Loop bounds"
    shape: rectangle
    style.fill: "#ffcdd2"
  }
  
  error_handler: {
    label: "Error Handler\n😊 Kid-friendly Errors\n• Friendly messages\n• Helpful suggestions\n• Recovery guidance\n• Learning opportunities"
    shape: rectangle
    style.fill: "#ffcdd2"
  }
  
  metrics_collector: {
    label: "Metrics Collector\n📊 Performance Tracking\n• Execution time\n• Memory usage\n• Parse metrics\n• User analytics"
    shape: rectangle
    style.fill: "#ffcdd2"
  }
}

# Backend Infrastructure
backend_layer: {
  label: "Backend Infrastructure"
  style.fill: "#f1f8e9"
  style.stroke: "#689f38"
  
  elixir_backend: {
    label: "Elixir Backend\n⚡ BEAM VM\n• Fault tolerance\n• Supervision trees\n• Hot code reloading\n• Distributed computing"
    shape: rectangle
    style.fill: "#dcedc8"
  }
  
  session_manager: {
    label: "Session Manager\n🗂️ State Management\n• User sessions\n• Variable persistence\n• Function storage\n• History tracking"
    shape: rectangle
    style.fill: "#dcedc8"
  }
  
  database: {
    label: "Database\n💾 Data Storage\n• User progress\n• Code snippets\n• Learning analytics\n• Session backups"
    shape: rectangle
    style.fill: "#dcedc8"
  }
}

# Connections
ui_layer.web_playground -> api_layer.rest_api
ui_layer.cli_repl -> core_layer.repl_engine
ui_layer.tui -> core_layer.repl_engine
ui_layer.mobile_app -> api_layer.websocket

api_layer.rest_api -> core_layer.repl_engine
api_layer.websocket -> core_layer.repl_engine

core_layer.repl_engine -> core_layer.parser
core_layer.parser -> core_layer.runtime
core_layer.runtime -> core_layer.optimizer

core_layer.repl_engine -> modal_layer.listen_mode
core_layer.repl_engine -> modal_layer.think_mode
core_layer.repl_engine -> modal_layer.build_mode
core_layer.repl_engine -> modal_layer.teach_mode

modal_layer.think_mode -> ai_graphics_layer.ai_assistant
modal_layer.teach_mode -> ai_graphics_layer.ai_assistant
core_layer.runtime -> ai_graphics_layer.turtle_graphics

core_layer.runtime -> safety_layer.safety_monitor
core_layer.runtime -> safety_layer.error_handler
core_layer.repl_engine -> safety_layer.metrics_collector

api_layer.rest_api -> backend_layer.session_manager
backend_layer.session_manager -> backend_layer.database
core_layer.runtime -> backend_layer.elixir_backend

# Data Flow Legend
legend: {
  label: "Architecture Legend"
  style.fill: "#f5f5f5"
  style.stroke-dash: 5
  
  solid_line: {
    label: "— Implemented"
    shape: text
  }
  
  dashed_line: {
    label: "--- Planned"
    shape: text
  }
  
  user_interfaces: {
    label: "User Interfaces"
    style.fill: "#bbdefb"
    shape: rectangle
  }
  
  api_layer_legend: {
    label: "API Layer"
    style.fill: "#e1bee7"
    shape: rectangle
  }
  
  core_runtime: {
    label: "Core Runtime"
    style.fill: "#c8e6c9"
    shape: rectangle
  }
  
  modal_programming: {
    label: "Modal Programming"
    style.fill: "#f8bbd9"
    shape: rectangle
  }
  
  ai_graphics: {
    label: "AI & Graphics"
    style.fill: "#ffe0b2"
    shape: rectangle
  }
  
  safety_monitoring: {
    label: "Safety & Monitoring"
    style.fill: "#ffcdd2"
    shape: rectangle
  }
  
  backend_infra: {
    label: "Backend Infrastructure"
    style.fill: "#dcedc8"
    shape: rectangle
  }
}